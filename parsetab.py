
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DOT EQ ID LPRN NOT NUM RPRNdlogStart : dlog DOTdlog : lhs EQ rhslhs : lhs_formulalhs_formula : ID LPRN list1 RPRNlist1 : list1 COMMA IDlist1 : IDrhs : rhs COMMA atomicrhs : atomicatomic : positive\n              | negationpositive : rhs_formulanegation : NOT rhs_formularhs_formula : ID LPRN list2 RPRNlist2 : list2 COMMA ID\n             | list2 COMMA NUMlist2 : ID\n             | NUM'
    
_lr_action_items = {'ID':([0,7,8,14,18,20,22,29,],[5,15,16,15,15,24,27,30,]),'$end':([1,6,],[0,-1,]),'DOT':([2,9,10,11,12,13,19,23,28,],[6,-2,-8,-9,-10,-11,-12,-7,-13,]),'EQ':([3,4,21,],[7,-3,-4,]),'LPRN':([5,15,],[8,20,]),'NOT':([7,18,],[14,14,]),'COMMA':([9,10,11,12,13,16,17,19,23,24,25,26,27,28,30,31,],[18,-8,-9,-10,-11,-6,22,-12,-7,-16,29,-17,-5,-13,-14,-15,]),'RPRN':([16,17,24,25,26,27,30,31,],[-6,21,-16,28,-17,-5,-14,-15,]),'NUM':([20,29,],[26,31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'dlogStart':([0,],[1,]),'dlog':([0,],[2,]),'lhs':([0,],[3,]),'lhs_formula':([0,],[4,]),'rhs':([7,],[9,]),'atomic':([7,18,],[10,23,]),'positive':([7,18,],[11,11,]),'negation':([7,18,],[12,12,]),'rhs_formula':([7,14,18,],[13,19,13,]),'list1':([8,],[17,]),'list2':([20,],[25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> dlogStart","S'",1,None,None,None),
  ('dlogStart -> dlog DOT','dlogStart',2,'p_dlog_start','DLOGParser.py',35),
  ('dlog -> lhs EQ rhs','dlog',3,'p_dlog','DLOGParser.py',41),
  ('lhs -> lhs_formula','lhs',1,'p_lhs','DLOGParser.py',44),
  ('lhs_formula -> ID LPRN list1 RPRN','lhs_formula',4,'p_formula','DLOGParser.py',47),
  ('list1 -> list1 COMMA ID','list1',3,'p_lhs_formula_list','DLOGParser.py',50),
  ('list1 -> ID','list1',1,'p_lhs_formula_list_base','DLOGParser.py',54),
  ('rhs -> rhs COMMA atomic','rhs',3,'p_rhs','DLOGParser.py',58),
  ('rhs -> atomic','rhs',1,'p_rhs_base','DLOGParser.py',94),
  ('atomic -> positive','atomic',1,'p_atomic_types','DLOGParser.py',97),
  ('atomic -> negation','atomic',1,'p_atomic_types','DLOGParser.py',98),
  ('positive -> rhs_formula','positive',1,'p_atomic','DLOGParser.py',101),
  ('negation -> NOT rhs_formula','negation',2,'p_rhs_formula_negation','DLOGParser.py',107),
  ('rhs_formula -> ID LPRN list2 RPRN','rhs_formula',4,'p_rhs_formula','DLOGParser.py',113),
  ('list2 -> list2 COMMA ID','list2',3,'p_rhs_list2','DLOGParser.py',117),
  ('list2 -> list2 COMMA NUM','list2',3,'p_rhs_list2','DLOGParser.py',118),
  ('list2 -> ID','list2',1,'p_rhs_list2_base','DLOGParser.py',122),
  ('list2 -> NUM','list2',1,'p_rhs_list2_base','DLOGParser.py',123),
]
